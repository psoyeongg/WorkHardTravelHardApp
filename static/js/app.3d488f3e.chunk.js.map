{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","editText","setEditText","toDos","setToDos","editItem","setEditItem","useEffect","loadToDos","_setWorking","work","a","async","AsyncStorage","setItem","JSON","stringify","console","log","onChangeTodoText","payload","saveToDos","toSave","getItem","s","isWorking","parse","fetchDelete","id","newToDos","updateTodoText","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","input","placeholder","onChangeText","onSubmitEditing","Date","now","completed","returnKeyType","value","ScrollView","Object","keys","length","map","key","toDo","editInput","defaultValue","state","newTodos","updateTodoState","checkableText","MaterialCommunityIcons","name","size","toDoText","textDecorationLine","flexDirection","marginRight","Feather","Platform","OS","confirm","Alert","alert","e","deleteToDo","FontAwesome","flex","alignItems","marginTop","StyleSheet","create","backgroundColor","paddingHorizontal","justifyContent","paddingVertical","borderRadius","marginVertical","width","marginBottom","marginLeft"],"mappings":"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","file":"static/js/app.3d488f3e.chunk.js","sourcesContent":["export const theme = {\r\n  bg: \"black\",\r\n  grey: \"#3a3d40\",\r\n  toDoBg: \"#5c5c60\",\r\n  completedText: \"#a3a8ad\",\r\n};\r\n","import { useEffect, useState } from \"react\";\nimport { StatusBar } from \"expo-status-bar\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { FontAwesome } from \"@expo/vector-icons\";\nimport { Feather } from \"@expo/vector-icons\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { theme } from \"./colors\";\n// import { EditModal } from \"./EditModal\";\n\nconst STORAGE_KEY = \"@toDos\";\nconst IS_WORKING = \"@working\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [editText, setEditText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n  const [editItem, setEditItem] = useState(null);\n\n  useEffect(() => {\n    loadToDos();\n  }, []);\n\n  const _setWorking = async (work) => {\n    try {\n      setEditItem(null);\n      await AsyncStorage.setItem(IS_WORKING, JSON.stringify(work));\n      setWorking(work);\n    } catch (e) {\n      console.log(\"_setWorking error! ==> \", e);\n    }\n  };\n\n  const onChangeText = (payload) => setText(payload);\n\n  const onChangeTodoText = (payload) => setEditText(payload);\n\n  const saveToDos = async (toSave) => {\n    try {\n      setEditItem(null);\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch (e) {\n      console.log(\"saveToDos error! ==> \", e);\n    }\n  };\n\n  const loadToDos = async () => {\n    try {\n      const s = await AsyncStorage.getItem(STORAGE_KEY);\n      const isWorking = await AsyncStorage.getItem(IS_WORKING);\n      setToDos(s !== null ? JSON.parse(s) : []);\n      setWorking(isWorking !== null ? JSON.parse(isWorking) : true);\n    } catch (e) {\n      console.log(\"loadToDos error! ==> \", e);\n    }\n  };\n\n  const onSubmit = async () => {\n    if (text === \"\") {\n      return;\n    }\n    try {\n      // const newToDos = Object.assign({}, toDos, {\n      //   [Date.now()]: { text, work: working },\n      // });\n      const newToDos = {\n        ...toDos,\n        [Date.now()]: { text, working, completed: false },\n      };\n      setToDos(newToDos);\n      setText(\"\");\n      await saveToDos(newToDos);\n    } catch (e) {\n      console.log(\"onSubmit error! ==> \", e);\n    }\n  };\n\n  const fetchDelete = async (id) => {\n    const newToDos = { ...toDos };\n    delete newToDos[id];\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n  };\n\n  const deleteToDo = (id) => {\n    try {\n      if (Platform.OS === \"web\") {\n        const ok = confirm(\"Do you want to delete this To Do?\");\n        if (ok) {\n          fetchDelete(id);\n        }\n      } else {\n        Alert.alert(\"Delete To Do?\", \"Are you sure?\", [\n          { text: \"Cancel\" },\n          {\n            text: \"I'm Sure\",\n            style: \"destructive\", // Only in iOS\n            onPress: () => fetchDelete(id),\n          },\n        ]);\n      }\n    } catch (e) {\n      console.log(\"deleteToDo error! ==> \", e);\n    }\n  };\n\n  const updateTodoState = async (id, state) => {\n    try {\n      const newTodos = { ...toDos };\n      newTodos[id].completed = !state;\n      setToDos(newTodos);\n      await saveToDos(newTodos);\n    } catch (e) {\n      console.log(\"updateTodoState error! ==> \", e);\n    }\n  };\n\n  const updateTodoText = async (id) => {\n    try {\n      if (editText !== \"\") {\n        const newToDos = { ...toDos };\n        newToDos[id].text = editText;\n        setToDos(newToDos);\n        await saveToDos(newToDos);\n      }\n    } catch (e) {\n      console.log(\"updateTodoText error! ==> \", e);\n    }\n  };\n\n  const editTodo = async (id) => {\n    if (editItem !== id) {\n      setEditItem(id);\n    } else {\n      updateTodoText(id);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"light\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => _setWorking(true)}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: working ? \"white\" : theme.grey,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={() => _setWorking(false)}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: !working ? \"white\" : theme.grey,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <View>\n        <TextInput\n          style={styles.input}\n          placeholder={working ? \"Add a To Do\" : \"Where do you want to go?\"}\n          onChangeText={onChangeText}\n          onSubmitEditing={onSubmit}\n          returnKeyType=\"done\"\n          value={text}\n        />\n      </View>\n      <ScrollView>\n        {Object.keys(toDos).length > 0 ? (\n          Object.keys(toDos).map((key) =>\n            toDos[key].working === working ? (\n              <View key={key} style={styles.toDo}>\n                {editItem && editItem === key ? (\n                  <TextInput\n                    style={styles.editInput}\n                    onChangeText={onChangeTodoText}\n                    onSubmitEditing={() => updateTodoText(key)}\n                    returnKeyType=\"done\"\n                    defaultValue={toDos[key].text}\n                  />\n                ) : (\n                  <TouchableOpacity\n                    onPress={() => updateTodoState(key, toDos[key].completed)}\n                  >\n                    <View style={styles.checkableText}>\n                      {toDos[key].completed ? (\n                        <MaterialCommunityIcons\n                          name=\"checkbox-marked-outline\"\n                          size={15}\n                          color={theme.completedText}\n                        />\n                      ) : (\n                        <MaterialCommunityIcons\n                          name=\"checkbox-blank-outline\"\n                          size={15}\n                          color=\"white\"\n                        />\n                      )}\n                      <Text\n                        style={{\n                          ...styles.toDoText,\n                          textDecorationLine: toDos[key].completed\n                            ? \"line-through\"\n                            : \"none\",\n                          color: toDos[key].completed\n                            ? theme.completedText\n                            : \"white\",\n                        }}\n                      >\n                        {toDos[key].text}\n                      </Text>\n                    </View>\n                  </TouchableOpacity>\n                )}\n\n                <View style={{ flexDirection: \"row\" }}>\n                  <TouchableOpacity\n                    onPress={() => editTodo(key)}\n                    style={{ marginRight: 15 }}\n                  >\n                    {editItem !== null && editItem === key ? (\n                      <Feather name=\"edit-3\" size={15} color=\"white\" />\n                    ) : (\n                      <Feather name=\"edit-2\" size={15} color=\"white\" />\n                    )}\n                  </TouchableOpacity>\n                  <TouchableOpacity onPress={() => deleteToDo(key)}>\n                    <FontAwesome name=\"trash-o\" size={15} color=\"white\" />\n                  </TouchableOpacity>\n                </View>\n              </View>\n            ) : null\n          )\n        ) : (\n          <View\n            style={{\n              flex: 1,\n              alignItems: \"center\",\n              marginTop: 200,\n            }}\n          >\n            <Text style={{ color: \"white\", fontSize: 50 }}>🤷‍♀️ NO ITEMS 🤷‍♀️</Text>\n          </View>\n        )}\n      </ScrollView>\n      {/* <EditModal visible={visible} /> */}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 15,\n  },\n  editInput: {\n    backgroundColor: \"white\",\n    paddingVertical: 5,\n    paddingHorizontal: 10,\n    borderRadius: 10,\n    width: 250,\n  },\n  toDo: {\n    backgroundColor: theme.grey,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 15,\n    fontWeight: \"500\",\n    marginLeft: 10,\n  },\n  checkableText: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n});\n"],"sourceRoot":""}